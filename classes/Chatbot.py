import openai
import os
from dotenv import load_dotenv

load_dotenv()


class Chatbot:
    """
    Build Scenario: The chatbot should have at least 4 conversational scenarios

    This class is used as a helper to integrate with openai API.
    It contains 2/4 conversational scenarios:

    1. The user asks for information about medication or supplement (side-effect, mixing medications, dosage, usage, etc.)
    2. The user presents their medical symptom and asks for recommendation (e.g.: "I have a headache, any recommendations?")

    ....


    Methods
    -------
    addMessage(role: str, content: str) -> list<{"role": str, "content": str}>
        Appends a new prompt to the list of prompts in the private list variable self.prompts then returns that variable
    get_bot_response(prompt: {"role": str, "content": str}) -> str
        Submits an api request to openai using the ai model "gpt-3.5-turbo" to get its response based on the prompt
    getGreeting() -> str
        Submits an api request to openai using a pre-defined prompt to get the greeting message so it is a fresh greeting every time

    """

    def __init__(self) -> None:
        """
        Attributes
        ----------
        openai.organization: str
            A string variable containing the organization id of the openai user for the api authorization
            Must be kept protected so it is only stored in the temporary storage (process) using python-dotenv
        openai.api_key: str
            A string variable containing the api key generated by openai for the api authorization
            Must be kept protected so it is only stored in the temporary storage (process) using python-dotenv
        self.prompts: list
            A list of dictionary containing directive and training data for the openai gpt model
            Roles:
                "system":       A directive on how the chatbot should act
                "user":         User message (this is usually the user input on chat.openai.com)
                "assistant":    ChatGPT's response to the user input
            See documentation for more information (https://platform.openai.com/docs/guides/gpt/chat-completions-api)

        """
        openai.organization = os.getenv("OPENAI_ORGANIZATION_ID")
        openai.api_key = os.getenv("OPENAI_API_KEY")

        self.prompts = [
            {
                "role": "system",
                "content": "You are a pharmacist that gives precise answers on over-the-counter medications and supplements.",
            },
            {
                "role": "user",
                "content": "I have a fever. Any recommendations for medication?",
            },
            {
                "role": "assistant",
                "content": "Consider acetaminophen (Tylenol) for fever relief.",
            },
        ]

    async def getGreeting(self) -> str:
        """

        This method prompts openai api to give a small greeting to the user

        """
        return await self.get_bot_response(
            {
                "role": "user",
                "content": "As a cheerful pharmacist, send a brief greeting.",
            }
        )

    def addMessage(self, role, content) -> list:
        """
        Appends a message to the self.prompts variable

        Parameters
        ----------
        role: str
            The role of the prompt (system, user, assistant) to determine the purpose of the content parameter
        content: str
            The message that gets sent to gpt-3 that does the following based on role:
                role == system      gives a directive to gpt-3 to play a persona
                role == user        sends a message to gpt-3 prompting a response
                role == assistant   gpt-3's response to the user prompt
        """
        self.prompts.append({"role": role, "content": content})

        if len(self.prompts) >= 20:
            self.prompts.pop(1)

        return self.prompts

    async def get_bot_response(self, prompt) -> str:
        """
        Submits a list of messages using openai api with the last one being a user prompt to get a gpt-3 model response
        1. This method appends the prompt from the parameter to the list of prompts
        2. It submits the message to openai using the ChatCompletion.create function
        3. We capture the response asynchronously to the response variable
        4. We append the response to the self.prompts list
        5. We return the chatbot response

        Parameters
        ----------
        prompt: {"role": str, "content": str}
            The prompt to append to the self.prompts variable and the prompt to get a response for

        """
        #  {"role": "user", "content": user_input}
        self.addMessage(prompt["role"], prompt["content"])

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=self.prompts,
            max_tokens=100,
            temperature=0.2,
        )

        self.addMessage(
            response.choices[0].message["role"], response.choices[0].message["content"]
        )
        return response.choices[0].message["content"]
